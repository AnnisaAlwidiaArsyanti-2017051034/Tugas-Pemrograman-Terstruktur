/*
Anngota Kelompok :
Annisa Alwidia Arsyanti - 2017051034
Safiira Rahmah Linisa - 2017051015
Silvia Rukmana - 2017051047

Link github : https://github.com/AnnisaAlwidiaArsyanti-2017051034/Tugas-Pemrograman-Terstruktur.git
*/

#include <iostream>
#include <cstring>
#include <cstdlib>

using namespace std;
const int cols = 16, rows = 15;

 char words[rows][cols] = {
 								"tgbwwinterwsesn",
                                "aaunttmmhfoodnb",
                                "jlwcqldzmpmvdmr",
                                "asagmquwvvbsohi",
                                "bwplotanadtpgnc",
                                "rewngodjcpnatnk",
                                "eeotwosbqharrsa",
                                "azcgeswewnaknpb",
                                "dinnerqodlwdcar",
                                "onopkwmparktzcc",
                                "qbfrogmamwpweey",
                                "lqzqnnmrzjjsclg",
                                "mosgzczetdbooto",
                                "pdcrzmsngrdnrpz",
                                "ohnkzwaterjgtra"};

char *getWordVertical(int);
char *getWordDiagonal(int, int);
char *getWordFlipDiagonal(int, int);
char *reverse(char *);
bool searchVertical(char *);
bool searchHorizontal(char *);
bool searchDiagonal(char *);

int main(){
    char word[16];
    int n;
    cin>>n;
    cin.ignore();
    
	for (int i=0;i<n;i++){
        cin.getline(word,16,'\n');
        if (searchVertical(word) || searchHorizontal(word))
            cout << "Ada\n";
        else 
            cout << "Tidak Ada\n";
    }
    
    return 0;
}

char *getWordVertical(int index){
	char *vertically = (char*)malloc(cols * sizeof(char));
	for(int i=0; i<rows; i++)
		vertically[i] = words[i][index];
	
	return vertically;
}

char *reverse(char *str){
	char *p1, *p2;

      if (! str || ! *str)
            return str;
      for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2)
      {
            *p1 ^= *p2;
            *p2 ^= *p1;
            *p1 ^= *p2;
      }
      return str;
}

bool searchVertical(char *search){
	for(int i=0; i<cols; i++)
		if(strstr(getWordVertical(i), search) != NULL)
			return true;
	
	for(int i=0; i<cols; i++)
		if(strstr(reverse(getWordVertical(i)), search) != NULL)
			return true;
	
	return false;
}

bool searchHorizontal(char *search){
	for(int i=0; i<cols; i++)
		if(strstr(words[i], search) != NULL)
			return true;
	
	for(int i=0; i<cols; i++){
		if(strstr(reverse(words[i]), search) != NULL)
			return true;
	}
	
	return false;
}
